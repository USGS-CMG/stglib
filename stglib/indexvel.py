from __future__ import print_function, division
import pandas as pd
import numpy as np
import scipy.stats
import xmltodict


def read_areacomp_stationarea(filename):
    return read_areacomp(filename)


def read_areacomp_stationstage(filename):
    return read_areacomp(filename)


def read_areacomp(filename):
    return pd.read_csv(filename, skiprows=4)


def read_qrev_xml(filename, encoding='utf-8'):
    with open(filename, encoding=encoding) as fd:
        return xmltodict.parse(fd.read())


def parse_qrev_xml(doc, negateq=False):
    """
    Parse XML output from QRev and return as a Pandas DataFrame

    Parameters
    ----------
    doc : dict
        XML document as generated by `xmltodict.parse()` of the QRev XML file.
    negateq : bool, optional
        Negate all q (discharge) values. Useful for changing the upstream/
        downstream convention. Default False

    Returns
    -------
    pandas.DataFrame
        pandas DataFrame of relevant values extracted from the QRev XML tree.
    """

    adcp = {}
    dct = doc['Channel']['Transect']
    r = range(len(dct))

    adcp['starttime'] = pd.to_datetime(
        [dct[n]['StartDateTime']['#text'] for n in r])
    adcp['endtime'] = pd.to_datetime(
        [dct[n]['EndDateTime']['#text'] for n in r])
    adcp['q'] = np.asarray(
        [float(dct[n]['Discharge']['Total']['#text']) for n in r])
    adcp['AreaQrev'] = np.asarray(
        [float(dct[n]['Other']['Area']['#text']) for n in r])
    adcp['Width'] = np.asarray(
        [float(dct[n]['Other']['Width']['#text']) for n in r])
    adcp['QoverA'] = np.asarray(
        [float(dct[n]['Other']['QoverA']['#text']) for n in r])
    adcp['filename'] = np.asarray(
        [dct[n]['Filename']['#text'] for n in r])


    adcp['time'] = pd.to_datetime(
        np.mean([adcp['starttime'].view('i8'), adcp['endtime'].view('i8')],
                axis=0).astype('datetime64[ns]'))

    adcp['qnegated'] = negateq
    if negateq:
        adcp['q'] = -adcp['q']

    df = pd.DataFrame(adcp, columns=['time',
                                     'q',
                                     'AreaQrev',
                                     'Width',
                                     'QoverA',
                                     'qnegated',
                                     'starttime',
                                     'endtime',
                                     'filename'])

    return df.set_index('time')


def linregress(adcp):
    """
    Perform a linear regression and return slope, intercept, r value, p value,
    and standard error of the slope. This is just a wrapper around
    `scipy.stats.linregress()`
    """
    (adcp['slope'],
     adcp['intercept'],
     adcp['r_value'],
     adcp['p_value'],
     adcp['std_err']) = scipy.stats.linregress(adcp['veli'], adcp['Vca'])

    return adcp
